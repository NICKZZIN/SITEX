// exploit.js - Vers√£o robusta para PS4
function log(msg) {
    try {
        let logs = localStorage.getItem('exploit_log') || '';
        logs += msg + '\n';
        localStorage.setItem('exploit_log', logs);
    } catch(e) {
        // Fallback se localStorage falhar
        console.error("Falha ao salvar log:", e);
    }
}

function foo(a, b, c) {
    try {
        let x = a | 0;
        let y = b | -5;  // For√ßa underflow
        let z = c & 0x7FFFFFFF;
        
        // Opera√ß√£o principal com prote√ß√£o
        z = (x << y) ^ (x << (y & 0x10ff));
        let r = z ^ 0xF01;
        let s = z ^ 0xF1F;
        
        // Resultado final com fallback
        let result = (((a >>> r) << s) >> s) || 0;
        return result;
    } catch(e) {
        log(`Erro em foo(): ${e.message}`);
        return 0xDEADBEEF; // Valor marcador
    }
}

// TESTE CONTROLADO (Fase 1)
let testValues = [
    [100, -5, 0x7FFFFFFF],
    [0, -10, 0xFFFFFFFF],
    [127, 0, 15],
    [0x7FFFFFFF, -20, 0] // Novo caso extremo
];

try {
    // Teste isolado com verifica√ß√µes
    testValues.forEach((args, i) => {
        let res = foo(...args);
        
        // Verifica√ß√£o robusta do resultado
        if (typeof res !== 'number') {
            log(`Teste ${i+1}: ${args} ‚Üí VALOR INVALIDO (${typeof res})`);
        } else {
            log(`Teste ${i+1}: ${args} ‚Üí ${res} (0x${res.toString(16)})`);
            
            // Detec√ß√£o de anomalias
            if (res !== -1 && res !== 0 && !isNaN(res)) {
                log(`üî• POSS√çVEL ANOMALIA: ${res.toString(16)}`);
            }
        }
    });
    
    // Fase 2 - Loop com prote√ß√£o contra crash
    log("\nüöÄ Iniciando Fase 2 (loop)");
    for(let i = 0; i < 10000; i++) {
        try {
            let res = foo(i & 127, -5 + (i % 20), 0x7FFFFFFF - (i % 100));
            
            // Verifica√ß√£o a cada 100 itera√ß√µes
            if (i % 100 === 0) {
                log(`Progresso: i=${i}, res=0x${res.toString(16)}`);
            }
            
            // Crit√©rio de parada
            if (res !== -1 && res !== 0 && (res & 0xFFFF0000) !== 0) {
                log(`üî• ANOMALIA DETECTADA em i=${i}: 0x${res.toString(16)}`);
                break;
            }
        } catch(e) {
            log(`üí• ERRO NO LOOP (i=${i}): ${e.message}`);
            break;
        }
    }
} catch(e) {
    log(`üí• ERRO GLOBAL: ${e.message}`);
}

// Exibi√ß√£o dos logs (com fallback)
try {
    let logs = localStorage.getItem('exploit_log') || "Nenhum log dispon√≠vel";
    alert(logs);
} catch(e) {
    console.error("Falha ao recuperar logs:", e);
}
