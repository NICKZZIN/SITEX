// exploit.js - Versão otimizada para evitar erros e detectar anomalias
function log(msg) {
    try {
        let logs = localStorage.getItem('exploit_log') || '';
        logs += msg + '|'; // Usar "|" para evitar truncamento no PS4
        localStorage.setItem('exploit_log', logs);
    } catch(e) {}
}

function foo(a, b, c) {
    let x = a | 0;
    let y = b | 0; // Removemos o underflow forçado inicial
    let z = c & 15;
    z = (x << y) ^ (x << (y & 0x10ff));
    let r = z ^ 0xF01;
    let s = z ^ 0xF1F;
    return (((a >>> r) << s) >> s) || 0; // Fallback para 0
}

// TESTE DIRETO (Substitua o loop anterior)
let LEN = 5000; // Reduza drasticamente
let crashPoint = -1;

try {
    for(let i = 0; i <= LEN; i++) {
        let a = (i & 127);
        let b = -5 + (i % 20); // Varie 'b' para forçar underflow
        let c = 0x7FFFFFFF - (i % 100);
        
        let res = foo(a, b, c);
        
        // Log numérico (evita problemas com toString)
        log(`${i}:${res}`); 
        
        // Detecta valores fora do padrão (ex.: != 0 ou -1)
        if(res !== 0 && res !== -1) {
            log(`!ANOMALIA!${res}`);
            crashPoint = i;
            break;
        }
    }
} catch(e) {
    log(`CRASH:${e.message}`);
}

// Resultado Final (Recupere via localStorage)
