function assert(x, msg) {
    if (!x)
        throw new Error("Bad assertion! " + msg);
}

(function () {
    let count = 0;

    function tryToLeakThisViaGetById() {
        class Leaker {
            leak() {
                return super.foo;
            }
        }

        Leaker.prototype.__proto__ = new Proxy({}, {
            get(target, propertyName, receiver) {
                console.log(`[getById] property: ${propertyName}`);
                return receiver;
            }
        });

        const { leak } = Leaker.prototype;
        return (() => leak())();
    }

    function tryToLeakThisViaGetByVal() {
        class Leaker {
            leak() {
                return super[Math.random() < 0.5 ? "foo" : "bar"];
            }
        }

        Leaker.prototype.__proto__ = new Proxy({}, {
            get(target, propertyName, receiver) {
                console.log(`[getByVal] property: ${propertyName}`);
                return receiver;
            }
        });

        const { leak } = Leaker.prototype;
        return (() => leak())();
    }

    function tryToLeakThisViaSetById() {
        let receiver;
        class Leaker {
            leak() {
                super.foo = {};
                return receiver;
            }
        }

        Leaker.prototype.__proto__ = new Proxy({}, {
            set(target, propertyName, value, __receiver) {
                receiver = __receiver;
                console.log(`[setById] property: ${propertyName}`);
                return true;
            }
        });

        const { leak } = Leaker.prototype;
        return (() => leak())();
    }

    function tryToLeakThisViaSetByVal() {
        let receiver;
        class Leaker {
            leak() {
                super[Math.random() < 0.5 ? "foo" : "bar"] = {};
                return receiver;
            }
        }

        Leaker.prototype.__proto__ = new Proxy({}, {
            set(target, propertyName, value, __receiver) {
                receiver = __receiver;
                console.log(`[setByVal] property: ${propertyName}`);
                return true;
            }
        });

        const { leak } = Leaker.prototype;
        return (() => leak())();
    }

    // Reduzido para debug, aumente depois de confirmar que roda
    for (var i = 0; i < 100; i++) {
        console.log(`--- Iteração ${i} ---`);

        assert(tryToLeakThisViaGetById() === undefined, "get_by_id");
        assert(tryToLeakThisViaGetByVal() === undefined, "get_by_val");
        assert(tryToLeakThisViaSetById() === undefined, "set_by_id");
        assert(tryToLeakThisViaSetByVal() === undefined, "set_by_val");
    }

    console.log("Teste finalizado com sucesso!");
})();
