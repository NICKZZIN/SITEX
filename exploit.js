function log(msg) {
    const p = document.createElement("pre");
    p.textContent = msg;
    document.body.appendChild(p);
}

// Simula o teste caso $vm não esteja disponível
function fakeEvaluateWithScopeExtension(code, scope) {
    log(`[!] Simulação: executando '${code}' com escopo fake.`);
    try {
        (new Function(code))();
    } catch (e) {
        log(`[!] Erro na simulação: ${e}`);
    }
}

function shouldBe(actual, expected) {
    if (actual !== expected)
        throw new Error(`Bad value: ${actual}!`);
}

function shouldThrow(func, errorMessage) {
    let errorThrown = false;
    try {
        func();
    } catch (error) {
        errorThrown = true;
        if (String(error) !== errorMessage)
            throw new Error(`Bad error: ${error}`);
    }
    if (!errorThrown)
        throw new Error("Didn't throw!");
}

function makeTestCases(ident) {
    return [
        `${ident}()`,
        `"use strict"; ${ident}()`,
        `eval("${ident}()")`,
        `eval("'use strict'; ${ident}()")`,
        `(0, eval)("${ident}()")`,
        `(0, eval)("'use strict'; ${ident}()")`,
        `"use strict"; (0, eval)("${ident}()")`,
        `new Function("${ident}()")()`,
        `new Function("'use strict'; ${ident}()")()`,
        `new Function("eval('${ident}()')")()`,
        `new Function("'use strict'; eval('${ident}()')")()`,
        `eval('new Function("${ident}()")()')`,
        `"use strict"; eval('new Function("${ident}()")()')`,
        `(0, eval)('new Function("${ident}()")()')`,
        String.raw`eval('new Function("\'use strict\'; ${ident}()")()')`,
        String.raw`eval('new Function("\'use strict\'; eval(\'${ident}()\')")()')`,
        String.raw`(0, eval)('new Function("\'use strict\'; ${ident}()")()')`,
        String.raw`(0, eval)('new Function("\'use strict\'; eval(\'${ident}()\')")()')`,
    ];
}

function makeScopeObject() {
    function foo() { foo.lastThisValue = this; }
    function bar() { "use strict"; bar.lastThisValue = this; }

    return { foo, bar };
}

(function () {
    const useVM = typeof $vm !== "undefined" && typeof $vm.evaluateWithScopeExtension === "function";
    log(`[+] Iniciando teste de stress - $vm ${useVM ? "disponível" : "NÃO disponível"}`);

    for (const ident of ["foo", "bar"]) {
        for (const testCase of makeTestCases(ident)) {
            const scope = makeScopeObject();
            for (let i = 0; i < 5; i++) {
                try {
                    if (useVM) {
                        $vm.evaluateWithScopeExtension(testCase, scope);
                    } else {
                        fakeEvaluateWithScopeExtension(testCase, scope);
                    }
                } catch (e) {
                    log(`[!] Erro no teste ${ident}, case ${i}: ${e}`);
                }
            }
            log(`[+] Finalizou ${ident}`);
        }
    }

    log(`[+] Teste completo.`);
})();
